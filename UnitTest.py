import encryption as en
import decryption as de
import Utils as utils
import rsa as rsa
lowerBound = 1e259 #RSA-260 
upperBound = 9.9999999999999999999999999999999999e259
path = "/home/jack/Desktop/RSATesting.txt"
pathOut = "/home/jack/Desktop"
def basicTest():
    print(en.encrypt(51, 55, 3))
    print(de.decrypt(en.encrypt(1, 55, 3),3,5,11))
    #print(utils.getPrime(3))
    x=1448253698229368010440434731715527436907444603619475643788436617178249755772639373106977420768228382693177505625573860309370280198474280439809533913663126983115003782748411347405597222712977
    #print(utils.largest2Power(91))
    #print(utils.miillerTest(x))
    #print(utils.MillerRabinPrime(x, -1))
    #print(utils.getPrime(x, lowerBound, upperBound))
    #print(utils.getCoPrime(40))
def RSAObjTest():
    rsaTest = rsa.RSAObj.newUser()
    rsaTest.getMessage("Hello FRiend!!! HOw are you today? Would you like somebread? The USSR is coming")
    encrypted = rsaTest.encrypteMess()
    print(encrypted)

    #rsaTest1 = rsa.RSAObj.newUser()
    rsaTest.getMessage(encrypted)
    decryptedMess = rsaTest.decrypteMess()
    print(decryptedMess)
def RSAFileTest():
    rsaTest = rsa.RSAObj(28195141519361302081262345889364364371659221092876221516775040289097820564134355031306299975907357321133881086400476865646075267478524705601720354231599301932677108439787569829335142261871291380574491983043021384831058362337939432113507396798768166463926554647,
                        32684509288567734601667457748531362623381996986365080700880577086029004705943291868519096483578082794892239795064183949728239785049972344120890778080719037724050738202681589506270334023366626008964864787137393059544195337501527129592819138097197557518261135959,
                        921544364882046267142245063275580172691395927564761031519772359371203636436073227605490711127058528029802655857731492397261242820102766492138009330878313223005761199514606309249656611517277074930859623146903671619056970066370669610755018772734342350756722234049118181111954478689710954529880133135601243333594591951485233775352797837132567065695066042193787064854337620818047175897211680003082177039081109387620082309858310926740536372211732004520334192517205909221686697376930763712560766485974108597581785899310251473,
                        97)
    rsaTest.setPathIn(path)
    
    # rsaTest.setPathOut(pathOut)
    # content_wFile = rsaTest.encrypteFile()
    print(rsaTest.encryptFile("RSATesting"))
    newPath = "/home/jack/Desktop/RSATesting_ENCRYPTED.txt"
    rsaTest.setPathIn(newPath)
    rsaTest.setPathOut(pathOut)
    #rsaTest.setBinaryOn()
    print(rsaTest.decryptFile("RSATesting_ENCRYPTED"))
    
    # content_noFile = rsaTest.encrypteFile()
    # print(content_noFile)
def testEncryptFile():
    #text fo;e
    rsaTest = rsa.RSAObj(28195141519361302081262345889364364371659221092876221516775040289097820564134355031306299975907357321133881086400476865646075267478524705601720354231599301932677108439787569829335142261871291380574491983043021384831058362337939432113507396798768166463926554647,
                        32684509288567734601667457748531362623381996986365080700880577086029004705943291868519096483578082794892239795064183949728239785049972344120890778080719037724050738202681589506270334023366626008964864787137393059544195337501527129592819138097197557518261135959,
                        921544364882046267142245063275580172691395927564761031519772359371203636436073227605490711127058528029802655857731492397261242820102766492138009330878313223005761199514606309249656611517277074930859623146903671619056970066370669610755018772734342350756722234049118181111954478689710954529880133135601243333594591951485233775352797837132567065695066042193787064854337620818047175897211680003082177039081109387620082309858310926740536372211732004520334192517205909221686697376930763712560766485974108597581785899310251473,
                        97)
    rsaTest.setPathIn(path)
    rsaTest.setPathOut(pathOut)
    rsaTest.encryptFile("RSATesting")
def Test1():
    rsaTest = rsa.RSAObj(N = 4435714761250981579481821231833231613954257709670092169525968828423596376103647260376432049373012099141621476632186141938386587670702412023338383878112494448293121913531880600703315309522106691461133279545009250847318256879480644249911741795047974409115290558567776161943523823940881318575009145667762502942960463931757707944569777573139581865421193182867118165369494422096785588025323357970463686908783963914878592762899771152784778927699151909406966658825661851529909296538846126702868768746563718445079797139761133071,
                        e = 71,
                        d = 2436519375898426501405507437204169478087550009537092881852292736739721953071017509220857041204893969951031515333172669515451787593766113646622492552766018077231433163771033006020130944667072689675833773271202264549935380539433029940092365211364380309232342701110532609988859931243515204845018637825957060132610696084408287110653977204114299028544008977570341023496859529077980670420228388946463559153996539635515915547468926701582688039634568494510950729545415751537035773937125047882300138084657223288909437434746775831)
    rsaTest.getMessage("742347493713361104639240279723021368679730574904258494031521397837233595144708793051345331406794285294173590435796380032522810032128789~20268310020793375501034836572791632673686434693919426470793529478128716651166439004708116081772977913512286699116324101441468819795310679857101249~2360949183737245111045067319409683133623718989182341430546343731423454725884333829558442940967692277981307755173592419705153099987660535173742592283~2360949183737245111045067319409683133623718989182341430546343731423454725884333829558442940967692277981307755173592419705153099987660535173742592283~16517012362883193951694191117247061482234837041613787220191735260093593953572744891731088502805581574238478770429825168419712498605777736608631311212~73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968780~508003770745998293006424773245232595129832937006155796621468301323543097339202367968213994850975779559483208775415858907113276627056097063555~16517012362883193951694191117247061482234837041613787220191735260093593953572744891731088502805581574238478770429825168419712498605777736608631311212~109709552827032507705623689282249151642812189359476171382680687222479568725624982909113227000521494071653213416148523724094429236823134474982129664156~2360949183737245111045067319409683133623718989182341430546343731423454725884333829558442940967692277981307755173592419705153099987660535173742592283~10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147~100000000000000000000000000000000000000000000000000000000000000000000000147~742347493713361104639240279723021368679730574904258494031521397837233595144708793051345331406794285294173590435796380032522810032128789~16517012362883193951694191117247061482234837041613787220191735260093593953572744891731088502805581574238478770429825168419712498605777736608631311212~2311182598171660589964340714211974219518513994388390429078206620110244710468465049009337880092043052703768071727487962276269140984520400532507264519278~73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968780~1150252359770544836877692757848303530233621636250842337455717461148559802933583279522527329654632933819650949049271575425459386884242923720353162~109709552827032507705623689282249151642812189359476171382680687222479568725624982909113227000521494071653213416148523724094429236823134474982129664156~20268310020793375501034836572791632673686434693919426470793529478128716651166439004708116081772977913512286699116324101441468819795310679857101249~73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968780~7546773094865101294419774423666050595119379686079005924330101976770145154466398271364507980581737803597975637525378359836766557231133216077078032521801~16517012362883193951694191117247061482234837041613787220191735260093593953572744891731088502805581574238478770429825168419712498605777736608631311212~693739118226332629586903672747276431620621146892345530829536519613257379585500336612970956688250294925364818642148501440306284992224303305632543933740~56647273448717788637859266801496898161433575437038527540286316148958683736878009974548946759584191523459787672460727374276772287613~56647273448717788637859266801496898161433575437038527540286316148958683736878009974548946759584191523459787672460727374276772287613~56647273448717788637859266801496898161433575437038527540286316148958683736878009974548946759584191523459787672460727374276772287613~100000000000000000000000000000000000000000000000000000000000000000000000147~")
    print(rsaTest.decrypteMess())

def Test2():
    rsaTest = rsa.RSAObj(N = 339005592507615816943505348577788039636244996255391516542151301201217821030046021287350705869499094013793631396903453467893654435097398709152343803351013774506305531955990499141342703526293214027808396136640281205571440573811045413762583148517614053560804537311310501748757286189584940754698088868078733085015736610131271272971253332638439426401612357686252741072508718906515496826645556505452257282545544142890874638096456398768001204016051322843808969139546851178066588553126535607416808309586801116399841813483317481,
                        e = 69,
                        d = 171959358518355849174241843481486686772008331433894247521381094812211938203646532537061952252644467978011262302777114077917071090266796446671478740830224378372763675629850253187637603237974818709757882098295794814420295943237486804082469713016181041661277663834880301386505045507708855213723998784577670325715723262614657076160587736024798388939710409548370962887957967065411080216472976514478608893211632746978283632140485220197502124876615187176642654612395749938855616812417001148600587741909060236087366601717845609)
    rsaTest.setPathIn("/home/jack/Desktop/RSATesting.txt")
    rsaTest.setPathOut(pathOut)
    rsaTest.encryptFile("RSATesting", "txt")

    rsaTest.setPathIn("/home/jack/Desktop/RSATesting_ENCRYPTED.txt")
    rsaTest.setPathOut(pathOut)
    rsaTest.decryptFile("RSATesting_ENCRYPTED")     
def TestNoneText():
    rsaTest = rsa.RSAObj(N = 339005592507615816943505348577788039636244996255391516542151301201217821030046021287350705869499094013793631396903453467893654435097398709152343803351013774506305531955990499141342703526293214027808396136640281205571440573811045413762583148517614053560804537311310501748757286189584940754698088868078733085015736610131271272971253332638439426401612357686252741072508718906515496826645556505452257282545544142890874638096456398768001204016051322843808969139546851178066588553126535607416808309586801116399841813483317481,
                    e = 69,
                    d = 171959358518355849174241843481486686772008331433894247521381094812211938203646532537061952252644467978011262302777114077917071090266796446671478740830224378372763675629850253187637603237974818709757882098295794814420295943237486804082469713016181041661277663834880301386505045507708855213723998784577670325715723262614657076160587736024798388939710409548370962887957967065411080216472976514478608893211632746978283632140485220197502124876615187176642654612395749938855616812417001148600587741909060236087366601717845609)
    rsaTest.setPathIn("/home/jack/Desktop/Donator Registry ID.pdf")
    rsaTest.setPathOut(pathOut)
    rsaTest.setBinaryOn()
    rsaTest.encryptFile("Donator Registry ID", "pdf")

    rsaTest.setPathIn("/home/jack/Desktop/Donator Registry ID_ENCRYPTED.txt")
    rsaTest.setPathOut(pathOut)
    rsaTest.setBinaryOn()
    rsaTest.decryptFile("FDonator Registry ID_ENCRYPTED")
#RSAObjTest()
#basicTest()
#RSAFileTest()
#Test1()
#testEncryptFile()
#RSAFileTest()
Test2()
#TestNoneText()